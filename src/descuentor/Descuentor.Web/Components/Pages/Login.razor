@page "/login"

@using Descuentor.Aplicacion.Dtos
@using Descuentor.Aplicacion.Interfaces
@inject NavigationManager Navigation
@inject IAuthService AuthService
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<h3>Login</h3>

<EditForm Model="_loginRequest" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="_loginRequest.Email" />
    </div>
    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="_loginRequest.Password" type="password" />
    </div>
    <button type="submit">Login</button>
</EditForm>

@code {
    private LoginRequest _loginRequest = new LoginRequest();
    //private LoginModel loginModel2 = new LoginModel{Email = "", Password = ""};


    private async Task HandleLogin()
    {
        Console.WriteLine("Lanzado");
        
        try
        {
            var result = await AuthService.Login(_loginRequest);
            if (result.AccessToken != "")
            {
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            // Manejar el error
        }
        
        
        
        // var response = await Http.PostAsJsonAsync("http://localhost:5095/identity/login", loginModel);
        // if (response.IsSuccessStatusCode)
        // {
        //     var tokens = await response.Content.ReadFromJsonAsync<TokenResponse>();
        //     // Guardar tokens en el almacenamiento local
        //     await TokenService.SetTokensAsync(tokens?.AccessToken!, tokens?.RefreshToken!, tokens.ExpiresIn);
        //     //await JsRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", tokens?.AccessToken);
        //     //await JsRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", tokens?.RefreshToken);
        //     
        // }
        // else
        // {
        //     // Manejar error de login
        // }
    }
}
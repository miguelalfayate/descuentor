@page "/"
@using System.Net
@using System.Net.Http.Headers
@using Descuentor.Aplicacion.Dtos
@using Descuentor.WebAssembly.Componentes
@using Descuentor.WebAssembly.Servicios

@inject HttpClient Http
@inject TokenService TokenService


<PageTitle>Descuentor</PageTitle>

<!-- Verifica si la lista de clientes está cargando -->
@if (listaProductos == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <h1 style="font-family: serif; text-align: center; margin-top: 20px">Lista de deseos</h1>
    <h4 style="font-family: serif; text-align: center;">Puedes navegar por los productos, verlos, modificarlos o eliminarlos.</h4>
    <div class="container d-flex justify-content-center" style="margin-top: 20px">
        <div class="row justify-content-center">
                <table class="table table-striped align-middle table-bordered rounded">
                    <thead class="table-danger">
                        <tr>
                            <th class="align-middle">Foto</th>
                            <th class="align-middle">
                                <button class="btn btn-link text-dark text-decoration-none d-flex align-items-center gap-1" @onclick="() => OrdenarPor(campoNombre)">
                                    <span style="font-weight:700">Nombre</span>
                                    @if (campoOrdenamiento == campoNombre)
                                    {
                                        <i class="bi @(ordenAscendente ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-down-up text-muted" style="opacity: 0.5;"></i>
                                    }
                                </button>
                            </th>
                            <th class="align-middle">
                                <button class="btn btn-link text-dark text-decoration-none d-flex align-items-center gap-1" @onclick="() => OrdenarPor(campoTienda)">
                                    <span style="font-weight:700">Tienda</span>
                                    @if (campoOrdenamiento == campoTienda)
                                    {
                                        <i class="bi @(ordenAscendente ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-down-up text-muted" style="opacity: 0.5;"></i>
                                    }
                                </button>
                            </th>
                            <th class="align-middle">
                                <button class="btn btn-link text-dark text-decoration-none d-flex align-items-center gap-1" @onclick="() => OrdenarPor(campoPrecioInicial)">
                                    <span style="font-weight:700">Precio Inicial</span>
                                    @if (campoOrdenamiento == campoPrecioInicial)
                                    {
                                        <i class="bi @(ordenAscendente ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-down-up text-muted" style="opacity: 0.5;"></i>
                                    }
                                </button>
                            </th>
                            <th class="align-middle">
                                <button class="btn btn-link text-dark text-decoration-none d-flex align-items-center gap-1" @onclick="() => OrdenarPor(campoPrecioActual)">
                                    <span style="font-weight:700">Precio Actual</span>
                                    @if (campoOrdenamiento == campoPrecioActual)
                                    {
                                        <i class="bi @(ordenAscendente ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-down-up text-muted" style="opacity: 0.5;"></i>
                                    }
                                </button>
                            </th>
                            <th class="align-middle">
                                <button class="btn btn-link text-dark text-decoration-none d-flex align-items-center gap-1" @onclick="() => OrdenarPor(campoPorcentajeVariacion)">
                                    <span style="font-weight:700">% de variación</span>
                                    @if (campoOrdenamiento == campoPorcentajeVariacion)
                                    {
                                        <i class="bi @(ordenAscendente ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-down-up text-muted" style="opacity: 0.5;"></i>
                                    }
                                </button>
                            </th>
                            <th class="align-middle">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < listaProductos!.Count; i++)
                        {
                            var producto = listaProductos[i];
                            <tr>
                                <td><img src="@producto.UrlImagen" style="width: 100px; height: 100px; object-fit: cover;" /></td>
                                <td>@producto.Nombre</td>
                                <td>@producto.TiendaNombre</td>
                                <td>@producto.PrecioInicial €</td>
                                <td>@producto.PrecioActual €</td>
                                <td style="color: @(producto.PrecioActual > producto.PrecioInicial ? "red" : producto.PrecioActual < producto.PrecioInicial ? "green" : "black")">
                                    @Math.Round(producto.PorcentajeVariacion!.Value, 1)%
                                </td>
                                <td>
                                    <div class="text-center d-flex justify-content-center gap-2">
                                        
                                        <a href="/productos/ver/@producto.Id" class="btn btn-success rounded-circle mx-1" role="button">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <a href="/productos/editar/@producto.Id" class="btn btn-warning rounded-circle mx-1" role="button">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <a href="/productos/eliminar/@producto.Id" class="btn btn-danger rounded-circle mx-1" role="button" onclick="return confirm('¿Estás seguro de que deseas eliminar este producto?');">
                                            <i class="bi bi-trash"></i>
                                        </a>
                                    </div>
                                    
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>



    <!-- Componente de paginación -->
    <div class="d-flex justify-content-center">
        <Paginacion PaginaActual="paginaActual" PaginasTotales="paginasTotales"
                    PaginaSeleccionada="PaginaSeleccionada"></Paginacion>
    </div>
}

@code {

    /// <summary>
    /// Lista de clientes que se mostrarán en la tabla.
    /// </summary>
    private List<ProductoDto>? listaProductos;

    /// <summary>
    /// Página actual en la que el usuario se encuentra.
    /// </summary>
    private int paginaActual = 1;

    /// <summary>
    /// Número total de páginas de la paginación.
    /// </summary>
    private int paginasTotales;

    /// <summary>
    /// Campo actualmente seleccionado para ordenación que será el ID.
    /// </summary>
    private string campoOrdenamiento = "Nombre";

    /// <summary>
    /// Campos posibles para ordenar la lista de clientes.
    /// </summary>
    private string campoNombre = "Nombre";

    private string campoTienda = "Tienda";
    private string campoPrecioInicial = "PrecioInicial";
    private string campoPrecioActual = "PrecioActual";
    private string campoPorcentajeVariacion = "PorcentajeVariacion";

    /// <summary>
    /// Indica si el orden debe ser ascendente o descendente.
    /// </summary>
    private bool ordenAscendente = true;

    /// <summary>
    /// Método llamado cuando la página se inicializa para cargar la lista de clientes.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await Cargar();
    }

    /// <summary>
    /// Ordena la lista de clientes por un campo específico (por ejemplo, ID, DNI, etc.).
    /// </summary>
    /// <param name="campo">Campo por el cual ordenar la lista de clientes.</param>
    private async Task OrdenarPor(string campo)
    {
        // Si el campo de ordenación actual es el mismo que el seleccionado, se invierte el orden
        if (campoOrdenamiento == campo)
        {
            ordenAscendente = !ordenAscendente;
        }
        else
        {
            // Si se selecciona un campo diferente, se ordena ascendentemente
            campoOrdenamiento = campo;
            ordenAscendente = true;
        }

        // Recarga los datos de la página con la ordenación seleccionada
        await Cargar(paginaActual);
    }

    /// <summary>
    /// Selecciona una página específica de la paginación.
    /// </summary>
    /// <param name="pagina">Número de la página seleccionada.</param>
    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }

    /// <summary>
    /// Carga los clientes de la API y actualiza la lista de clientes y el total de páginas.
    /// </summary>
    /// <param name="pagina">Número de la página a cargar (por defecto 1).</param>
    private async Task Cargar(int pagina = 1)
    {
        // Construye la URL con los parámetros de ordenación y paginación
        var ordenamiento = string.IsNullOrEmpty(campoOrdenamiento) ? "" : $"&campoOrden={campoOrdenamiento}&ordenAscendente={ordenAscendente}";
        var url = $"http://localhost:5095/api/productos?pagina={pagina}{ordenamiento}";

        // Realiza la solicitud para obtener la lista de productos
        var accessToken = await TokenService.GetAccessTokenAsync();
        
        if (!string.IsNullOrEmpty(accessToken))
        {
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                listaProductos = await response.Content.ReadFromJsonAsync<List<ProductoDto>>();
                paginasTotales = response.Headers.TryGetValues("Totalpaginas", out var valores) ? int.Parse(valores.FirstOrDefault()!) : 1;
            }

            
        }
           }

}

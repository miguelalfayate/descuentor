@page "/usuario/editar"

@using System.Net.Http.Headers
@using Descuentor.Shared.Dtos
@using Descuentor.WebAssembly.Interfaces
@using ApiErrorDetailsResponse = Descuentor.WebAssembly.Modelos.Responses.ApiErrorDetailsResponse
@using ApiOkResponse = Descuentor.WebAssembly.Modelos.Responses.ApiOkResponse
@using CambioPasswordRequest = Descuentor.WebAssembly.Modelos.Requests.CambioPasswordRequest
@using IAuthService = Descuentor.WebAssembly.Interfaces.IAuthService

@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ITokenService TokenService

<h3 class="text-center">Editar Usuario</h3>

<!-- Formulario para editar información personal -->
<EditForm Model="@usuarioEditarDto" OnValidSubmit="UsuarioEditarManejador" class="col-md-6 offset-md-3">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre:</label>
        <InputText @bind-Value="usuarioEditarDto.Nombre" class="form-control" />
        <ValidationMessage For="@(() => usuarioEditarDto.Nombre)" />
    </div>

    <div class="mb-3">
        <label for="apellidos" class="form-label">Apellidos:</label>
        <InputText @bind-Value="usuarioEditarDto.Apellidos" class="form-control" />
        <ValidationMessage For="@(() => usuarioEditarDto.Apellidos)" />
    </div>

    <div class="mb-3">
        <label for="telefono" class="form-label">Número de Teléfono:</label>
        <InputText @bind-Value="usuarioEditarDto.Telefono" class="form-control" />
        <ValidationMessage For="@(() => usuarioEditarDto.Telefono)" />
    </div>

    <div class="d-flex justify-content-between" style="margin-top: 20px; gap: 10px;">
        <button type="submit" class="btn btn-primary w-50">Guardar</button>
        <button type="button" class="btn btn-secondary w-50" @onclick="Volver">Volver</button>
    </div>
</EditForm>

@if (errorMessages.Any())
{
    <div class="alert alert-danger" style="margin-top: 20px;">
        <ul>
            @foreach (var error in errorMessages)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@* <hr /> *@
@* *@
@* <!-- Formulario para cambiar la contraseña --> *@
@* <EditForm Model="@cambioPasswordRequest" OnValidSubmit="CambioPasswordManejador"> *@
@*     <DataAnnotationsValidator /> *@
@*     <ValidationSummary /> *@
@* *@
@*     <div class="mb-3"> *@
@*         <label for="oldPassword" class="form-label">Contraseña Antigua:</label> *@
@*         <InputText type="password" @bind-Value="cambioPasswordRequest.OldPassword" class="form-control" /> *@
@*         <ValidationMessage For="@(() => cambioPasswordRequest.OldPassword)" /> *@
@*     </div> *@
@* *@
@*     <div class="mb-3"> *@
@*         <label for="newPassword" class="form-label">Nueva Contraseña:</label> *@
@*         <InputText type="password" @bind-Value="cambioPasswordRequest.NewPassword" class="form-control" /> *@
@*         <ValidationMessage For="@(() => cambioPasswordRequest.NewPassword)" /> *@
@*     </div> *@
@* *@
@*     <div class="mb-3"> *@
@*         <label for="confirmNewPassword" class="form-label">Confirmar Nueva Contraseña:</label> *@
@*         <InputText type="password" @bind-Value="cambioPasswordRequest.ConfirmPassword" class="form-control" /> *@
@*         <ValidationMessage For="@(() => cambioPasswordRequest.ConfirmPassword)" /> *@
@*     </div> *@
@* *@
@*     <button type="submit" class="btn btn-primary w-100" style="margin-top: 20px;">Cambiar Contraseña</button> *@
@* </EditForm> *@
@* *@
@* @if (errorMessages.Any()) *@
@* { *@
@*     <div class="alert alert-danger" style="margin-top: 20px;"> *@
@*         <ul> *@
@*             @foreach (var error in errorMessages) *@
@*             { *@
@*                 <li>@error</li> *@
@*             } *@
@*         </ul> *@
@*     </div> *@
@* } *@

@code {
    private UsuarioEditarDto usuarioEditarDto = new();
    private CambioPasswordRequest cambioPasswordRequest = new();
    private List<string> errorMessages = new();
    
    protected override async Task OnInitializedAsync()
    {
        await CargarUsuario();
    }

    private async Task CargarUsuario()
    {
        var accessToken = await TokenService.GetAccessTokenAsync();

        if (!string.IsNullOrEmpty(accessToken))
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5095/api/usuarios");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await Http.SendAsync(request);
            
            if (response.IsSuccessStatusCode)
            {
                var respuesta = await response.Content.ReadFromJsonAsync<ApiOkResponse>();
                usuarioEditarDto = respuesta!.Value;
            }
            else
            {
                var responseContent = await response.Content.ReadFromJsonAsync<List<ApiErrorDetailsResponse>>();
                Console.WriteLine("Respuesta" + responseContent);
                if (responseContent != null)
                {
                    errorMessages = responseContent.Select(e => e.Description).ToList();
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task UsuarioEditarManejador()
    {
        var accessToken = await TokenService.GetAccessTokenAsync();

        if (!string.IsNullOrEmpty(accessToken))
        {
            var request = new HttpRequestMessage(HttpMethod.Put, "http://localhost:5095/api/usuarios");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            request.Content = JsonContent.Create(usuarioEditarDto);
            
            var response = await Http.SendAsync(request);
            
            //var result = await Http.PutAsJsonAsync("http://localhost:5095/api/usuarios", usuarioEditarDto);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var responseContent = await response.Content.ReadFromJsonAsync<List<ApiErrorDetailsResponse>>();
                Console.WriteLine("Respuesta" + responseContent);
                if (responseContent != null)
                {
                    errorMessages = responseContent.Select(e => e.Description).ToList();
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }

    }

    private async Task CambioPasswordManejador()
    {
        try
        {
            var result = await Http.PostAsJsonAsync("http://localhost:5095/identity/manage/info", usuarioEditarDto);
            if (result.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var responseContent = await result.Content.ReadFromJsonAsync<List<ApiErrorDetailsResponse>>();
                Console.WriteLine("Respuesta" + responseContent);
                if (responseContent != null)
                {
                    errorMessages = responseContent.Select(e => e.Description).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            // Manejar el error
        }
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/");
    }

}
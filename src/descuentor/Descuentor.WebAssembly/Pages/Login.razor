@page "/login"

@using Descuentor.Aplicacion.Dtos
@using Descuentor.Aplicacion.Interfaces
@inject NavigationManager Navigation
@inject IAuthService AuthService

@layout AuthLayout

@* <div class="container"> *@
@*     <div class="row justify-content-center"> *@
@*         <div class="col-md-6"> *@
@*             <div class="card mt-5"> *@
@*                 <div class="card-body"> *@

<img src="logo.png" alt="Logo" style="height: 40px; margin-bottom: 20px; display: block; margin-left: auto; margin-right: auto" />
<h3 class="text-center" style="font-family: serif;">Login</h3>

                    <EditForm Model="_loginRequest" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email:</label>
                            <InputText id="email" class="form-control" @bind-Value="_loginRequest.Email" />
                            <ValidationMessage For="@(() => _loginRequest.Email)" />
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password:</label>
                            <InputText id="password" class="form-control" @bind-Value="_loginRequest.Password" type="password" />
                            <ValidationMessage For="@(() => _loginRequest.Password)" />
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Login</button>
                        <a href="/register" class="d-block text-center mt-3">¿No tienes una cuenta? Regístrate aquí</a>
                    </EditForm>
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

@code {
    private LoginRequest _loginRequest = new LoginRequest();
    //private LoginModel loginModel2 = new LoginModel{Email = "", Password = ""};


    private async Task HandleLogin()
    {
        Console.WriteLine("Lanzado");
        
        try
        {
            var result = await AuthService.Login(_loginRequest);
            if (result.AccessToken != "")
            {
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            // Manejar el error
        }
        
        
        
        // var response = await Http.PostAsJsonAsync("http://localhost:5095/identity/login", loginModel);
        // if (response.IsSuccessStatusCode)
        // {
        //     var tokens = await response.Content.ReadFromJsonAsync<TokenResponse>();
        //     // Guardar tokens en el almacenamiento local
        //     await TokenService.SetTokensAsync(tokens?.AccessToken!, tokens?.RefreshToken!, tokens.ExpiresIn);
        //     //await JsRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", tokens?.AccessToken);
        //     //await JsRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", tokens?.RefreshToken);
        //     
        // }
        // else
        // {
        //     // Manejar error de login
        // }
    }
}